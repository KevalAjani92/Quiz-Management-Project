@* @model QuizManagement.Models.QuizwiseQuestionModel *@
@{
    ViewData["Title"] = "Quizwise Question Add/Edit";
}
@model DataTable
@using System.Data


<main id="main" class="main flex-grow-1 ">

    <div class="pagetitle">
        <h1>Question</h1>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item">Question</li>
                <li class="breadcrumb-item active">Quiz wise Question</li>
            </ol>
        </nav>
    </div>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Add / Edit Quiz wise Question</h5>
            <hr />
            <form class="row g-3 needs-validation" id="quizwiseQuestionForm" novalidate asp-controller="QuizwiseQuestion" asp-action="QuizwiseQuestionList">
                <div class="col-md-3">
                    <label class="form-label">Total Questions Allowed</label>
                    <input type="number" class="form-control" name="totalQuestion" readonly disabled value=0 id="totalQuestionAllowed" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Entered Questions</label>
                    <input type="number" class="form-control" name="selectedQuestionCount" id="selectedQuestion" readonly disabled value=0 />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Select Quiz</label>
                    <select class="form-select" id="quizDropDown" asp-items="@(ViewBag.QuizList != null ? new SelectList(ViewBag.QuizList, "QuizID", "QuizName") : new SelectList(new List<SelectListItem>()))">
                        <option value="" disabled selected>Select Quiz to Enter Question</option>

                    </select>
                </div>

                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th class="col-1" data-orderable="false"><input type="checkbox" class="form-check select-all" value="" /></th>
                            <th class="col-4">Question</th>
                            <th class="col-1">Option A</th>
                            <th class="col-1">Option B</th>
                            <th class="col-1">Option C</th>
                            <th class="col-1">Option D</th>
                            <th class="col-2">Correct Option</th>
                            <th class="col-1">Marks</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(DataRow rows in Model.Rows){
                            <tr>
                                <td><input type="checkbox" class="form-check row-checkbox" value="@rows["QuestionID"]" /></td>
                                <td>@rows["QuestionText"]</td>
                                <td>@rows["OptionA"]</td>
                                <td>@rows["OptionB"]</td>
                                <td>@rows["OptionC"]</td>
                                <td>@rows["OptionD"]</td>
                                <td class="text-center">@rows["CorrectOption"]</td>
                                <td>@rows["QuestionMarks"]</td>
                            </tr>
                        }
                        
                    </tbody>
                </table>
                <!-- End Table with stripped rows -->
                </table>
                <div class="text-center pt-3">
                    <button  type="submit" onclick="addQuestion(event)" class="btn btn-success">Save</button>
                    <a asp-controller="QuizwiseQuestion" asp-action="QuizwiseQuestionList" class="btn btn-danger">Cancel</a>
                </div>
            </form>


        </div>
    </div>
</main>
<!--SweetAlert Scripts-->
<script>
        function confirmSave(event) {
        event.preventDefault(); // Prevent form submission

        var form = $("#quizwiseQuestionForm");

        // Trigger client-side validation
        form.validate(); // Ensure validation runs
        if (!form.valid()) {
            // Collect error messages from validation spans
            var errors = [];
            form.find("span[data-valmsg-for]").each(function () {
                var errorMsg = $(this).text().trim();
                if (errorMsg) {
                    errors.push(errorMsg);
                }
            });

            // Show SweetAlert2 with validation errors
            if (errors.length > 0) {
                Swal.fire({
                    title: "Validation Error!",
                    text: "Please fill out all fields before submitting.",
                    icon: "error",
                    confirmButtonColor: "#d33",
                });
            }
            return; // Stop execution if validation fails
        }

        // If validation passes, show confirmation popup
        Swal.fire({
            title: "Are you sure?",
            text: "Do you want to save this Quiz?",
            icon: "question",
            showCancelButton: true,
            confirmButtonColor: "#28a745",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, Save it!"
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    icon: "success",
                    title: "Your Quiz has Been Saved Successfully.",
                    text: 'Redirecting to QuizwiseQuestion List...',
                    timer: 2000,
                    showConfirmButton: false
                }).then(() => {
                    form[0].submit();
                });
            }
        });
    }
</script>

<!--Additional Scripts-->
<script>
    // CheckBox
    document.addEventListener("DOMContentLoaded", function () {
        console.log("Call addedit");

            const selectAllCheckbox = document.querySelector(".select-all");
            const rowCheckboxes = document.querySelectorAll(".row-checkbox");
            const totalSelected = document.getElementById("selectedQuestion");


            function updateSelectedCount() {
                const checkedBoxes = document.querySelectorAll(".row-checkbox:checked").length;
                totalSelected.value = checkedBoxes;
            }

            // Select/Deselect all checkboxes when header checkbox is clicked
            selectAllCheckbox.addEventListener("change", function () {
                const isChecked = this.checked;
                rowCheckboxes.forEach(checkbox => {
                    checkbox.checked = isChecked;
                });
                // console.log(document.getElementById("quizDropDown").value);
                const quizDropDown = document.getElementById("quizDropDown");

                if (!isChecked) {
                    // sessionStorage.setItem("selectedQuiz", quizDropDown.value); // Store before reload
                    // location.reload();
                    
                    quizDropDown.dispatchEvent(new Event("change"));
                }
                updateSelectedCount();
            });

            // Uncheck header checkbox if any row checkbox is unchecked
            rowCheckboxes.forEach(checkbox => {
                checkbox.addEventListener("change", function () {
                    const totalCheckbox = rowCheckboxes.length;
                    const checkedBoxes = document.querySelectorAll(".row-checkbox:checked").length;
                    selectAllCheckbox.checked = (checkedBoxes === totalCheckbox);
                    updateSelectedCount();
                });
            });

            //For Edit Quiz
            const url = new URL(window.location.href);
            const quizID = Number(url.searchParams.get("QuizID")) ;
            const quizDropDown = document.getElementById("quizDropDown");
            
            if(quizID !== 0){
                fetch("/QuizwiseQuestion/GetQuizDetails",{
                method:"POST",
                headers:{ "Content-Type": "application/json" },
                body: JSON.stringify(quizID)
                })
                .then(response =>{
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                })
                .then(result =>{

                    if (result.message === "Success") {
                        document.getElementById("totalQuestionAllowed").value = result.totalQuestion;
                        console.log("Total : "+result.totalQuestion);
                        quizDropDown.value = quizID===0 ? "" : quizID;
                        quizDropDown.dispatchEvent(new Event("change"));
                        quizDropDown.disabled = true;
                    } else {
                        console.error("Error fetching data:", result);
                    }
                })
                .catch(error=> console.error("Fetch error:", error));
            }
            
        });
            document.getElementById("quizDropDown").addEventListener("change",function(){
            console.log(this.value);

            const url = "/QuizwiseQuestion/GetQuestionID_From_QuizID";
                fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(this.value)
                })
                .then(response =>{
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(result =>{
                    // console.log("Response:", result);

                    if (result.message === "Success") {
                        // console.log("Question IDs:", result.dataList);
                        markQuestionFromArray(result.dataList);
                    } else {
                        console.error("Error fetching data:", result);
                    }
                })
                .catch(error=> console.error("Fetch error:", error));

                fetch("/QuizwiseQuestion/GetQuizDetails",{
                method:"POST",
                headers:{ "Content-Type": "application/json" },
                body: JSON.stringify(this.value)
                })
                .then(response =>{
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                })
                .then(result =>{

                    if (result.message === "Success") {
                        document.getElementById("totalQuestionAllowed").value = result.totalQuestion;
                        // console.log("Total : "+result.totalQuestion);
                        // quizDropDown.value = quizID===0 ? "" : quizID;
                        // quizDropDown.dispatchEvent(new Event("change"));
                    } else {
                        console.error("Error fetching data:", result);
                    }
                })
                .catch(error=> console.error("Fetch error:", error));
                
            })

            function markQuestionFromArray(tempArr){
                document.getElementById("selectedQuestion").value = tempArr.length;

                const rowCheckboxes = document.querySelectorAll(".row-checkbox");
                rowCheckboxes.forEach((box)=>{
                    if(tempArr.includes(box.value)){
                        // console.log(box.checked);
                        box.checked = true;
                    }else{
                        box.checked = false;
                    }
                })
            }
            // Restore dropdown value after reload
            // window.addEventListener("load", function () {
            //     const storedQuiz = sessionStorage.getItem("selectedQuiz");
            //     if (storedQuiz) {
            //         document.getElementById("quizDropDown").value = storedQuiz;
            //         sessionStorage.removeItem("selectedQuiz"); // Clear storage after setting

            //         // 🔥 Manually trigger the change event
            //         quizDropDown.dispatchEvent(new Event("change"));
            //     }
            // });

        function addQuestion(event){
            event.preventDefault();
            const checkedBoxes = document.querySelectorAll(".row-checkbox:checked")
            const valuesArray = Array.from(checkedBoxes).map(checkbox => checkbox.value).join(",");
            
            const quizID = Number(document.getElementById("quizDropDown").value);
            const userID = Number(@CommonVariable.UserID());
            console.log(valuesArray,quizID,userID);

            const url = "/QuizwiseQuestion/AddQuestions_Into_Quiz";
                fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({values : valuesArray,quizID : quizID,userID : userID})
                })
                .then(response =>{
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(result =>{
                    // console.log("Response:", result);

                    if (result.message === "Success") {
                        window.location.href = '/QuizwiseQuestion/QuizwiseQuestionList';
                    } else {
                        console.error("Error fetching data:", result);
                    }
                })
                .catch(error=> console.error("Fetch error:", error));
                
                
        }
        
</script>

<!--DataTable Script-->
<script>
        document.addEventListener("DOMContentLoaded", function () {
            let table = new DataTable(".datatable", {
                paging: true,       // Enable pagination
                searching: true,    // Enable search bar
                ordering: true,     // Enable column sorting
                pageLength: 10,       // Set default rows per page
                columnDefs: [
                    {orderable: false, targets: 0},
                    { orderable: true, targets: [1, 7] }, // Enable sorting for "Question" and "Marks"
                    { orderable: false, targets: '_all' } // Disable sorting for all other columns
                ]
        });
        })

</script>



