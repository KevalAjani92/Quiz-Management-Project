@{
    ViewData["Title"] = "Quizwise Question Details";
}
@model DataTable
@using System.Data


<main id="main" class="main flex-grow-1">

    <div class="pagetitle">
        <h1>Quiz wise Question Details</h1>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
                <li class="breadcrumb-item">Quiz wise Question</li>
                <li class="breadcrumb-item active">Quiz wise Question Details</li>
            </ol>
        </nav>
    </div><!-- End Page Title -->
    <section class="section">
        <div class="row">
            <div class="col-lg-12">

                <div class="card">
                    <div class="card-body">
                        <div class="d-flex flex-md-row flex-column justify-content-between align-items-center mb-3">
                            <h5 class="card-title">Quiz wise Question Details</h5>
                            <div class="d-flex flex-sm-row flex-column gap-2 align-items-center">
                                <a class="btn btn-danger d-flex align-items-center" id="multiDeleteBtn" >
                                    <i class="bi bi-trash3-fill me-2 d-flex align-items-center"></i>Delete Selected
                                </a>
                                <a class="btn btn-primary d-flex  align-items-center" id="addQuestionBtn" asp-controller="QuizwiseQuestion" asp-action="AddEdit_QuizwiseQuestion">
                                    <i class="bi bi-plus-circle me-2 d-flex align-items-center"></i>Add Question
                                </a>
                            </div>
                        </div>
                        <div class="my-3 d-flex flex-column flex-md-row text-center">
                            <span>Quiz Name: <span id="quizName"></span></span>
                            <span class="mx-5">Entered Question: @Model.Rows.Count</span>
                            <span>Total Questions Allowed: <span id="totalQuestionAllowed"></span> </span>
                            
                        </div>
                            <!-- Table with stripped rows -->
                            <table class="table datatable table-striped">
                                <thead class="table-light">
                                    <tr>
                                        <th class="col-1" data-orderable="false"><input type="checkbox" class="form-check select-all" value="" /></th>
                                        <th class="col-4">Question</th>
                                        <th class="col-1">Option A</th>
                                        <th class="col-1">Option B</th>
                                        <th class="col-1">Option C</th>
                                        <th class="col-1">Option D</th>
                                        <th class="col-1">Correct Option</th>
                                        <th class="col-1">Marks</th>
                                        <th class="text-center col-2">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(DataRow rows in Model.Rows){
                                        <tr>
                                            <td><input type="checkbox" class="form-check row-checkbox" value="@rows["QuizWiseQuestionsID"]" /></td>
                                            <td>@rows["QuestionText"]</td>
                                            <td>@rows["OptionA"]</td>
                                            <td>@rows["OptionB"]</td>
                                            <td>@rows["OptionC"]</td>
                                            <td>@rows["OptionD"]</td>
                                            <td class="text-center">@rows["CorrectOption"]</td>
                                            <td>@rows["QuestionMarks"]</td>
                                            <td class="text-center">
                                                <div class="d-flex justify-content-evenly gap-2">

                                                    <a class="btn border-0 p-0" title="Delete" onclick="confirmDelete(event,@rows["QuizWiseQuestionsID"])">
                                                        <span class="badge bg-danger p-2 rounded-pill d-flex align-items-center justify-content-center">
                                                            <i class="bi bi-trash fs-6 text-white"></i>
                                                        </span>
                                                    </a>


                                                </div>
                                            </td>
                                        </tr>
                                    }
                                    
                                </tbody>
                            </table>
                            <!-- End Table with stripped rows -->
                        
                    </div>
                </div>

            </div>
            <div class="text-center pt-4">
                <button type="button" class="btn btn-outline-primary px-4" onclick="goBack()">&larr; Back</button>
            </div>
        </div>
    </section>

</main><!-- End #main -->
<!-- Delete SweetAlert -->
<script>
    function confirmDelete(event,id){
        event.preventDefault();

      const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "btn btn-success ms-2",
        cancelButton: "btn btn-danger"
      },
      buttonsStyling: false
      });
    swalWithBootstrapButtons.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, delete it!",
      cancelButtonText: "No, cancel!",
      reverseButtons: true
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire({
            icon: "success",
            title: "Your Question has Been Removed From Quiz Successfully.",
            timer: 2000,
            showConfirmButton: false
        }).then(()=>{
            window.location.href = "/QuizwiseQuestion/DeleteQuestionFromQuiz?QuizwiseQuestionID="+id;
        });
      } else if (
        /* Read more about handling dismissals below */
        result.dismiss === Swal.DismissReason.cancel
      ) {
        swalWithBootstrapButtons.fire({
          title: "Cancelled",
          text: "Your imaginary file is safe :)",
          icon: "error"
        });
      }
    });

    }
</script>
<script>
    function goBack(){
        window.history.back();
    }
    document.addEventListener("DOMContentLoaded", function () {
        console.log("call layout")
        const selectAllCheckbox = document.querySelector(".select-all");
        const rowCheckboxes = document.querySelectorAll(".row-checkbox");

        // Select/Deselect all checkboxes when header checkbox is clicked
        selectAllCheckbox.addEventListener("change", function () {
            const isChecked = this.checked;
            rowCheckboxes.forEach(checkbox => {
                checkbox.checked = isChecked;
            });
        });

        // Uncheck header checkbox if any row checkbox is unchecked
        rowCheckboxes.forEach(checkbox => {
            checkbox.addEventListener("change", function () {
                const totalCheckbox = rowCheckboxes.length;
                const checkedBoxes = document.querySelectorAll(".row-checkbox:checked").length;
                if (checkedBoxes !== totalCheckbox) {
                    selectAllCheckbox.checked = false;
                }
                if(checkedBoxes === totalCheckbox){
                    selectAllCheckbox.checked = true;
                }
            });
        });

        const url = new URL(window.location.href);
            const quizID = Number(url.searchParams.get("QuizID"));

            const addQuestionBtn = document.getElementById("addQuestionBtn");
            addQuestionBtn.href = '/QuizwiseQuestion/AddEdit_QuizwiseQuestion?QuizID='+quizID;

            //For QuizDetails
            fetch("/QuizwiseQuestion/GetQuizDetails",{
                method:"POST",
                headers:{ "Content-Type": "application/json" },
                body: JSON.stringify(quizID)
            })
            .then(response =>{
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
            })
            .then(result =>{

                if (result.message === "Success") {
                    document.getElementById("totalQuestionAllowed").textContent = result.totalQuestion;
                    document.getElementById("quizName").textContent = result.quizName;
                } else {
                    console.error("Error fetching data:", result);
                }
            })
            .catch(error=> console.error("Fetch error:", error));

    });
    document.getElementById("multiDeleteBtn").addEventListener("click",function(){
        const checkedBoxes = document.querySelectorAll(".row-checkbox:checked");
        const valuesArray = Array.from(checkedBoxes).map(checkbox => checkbox.value);
        
        const swalWithBootstrapButtons = Swal.mixin({
        customClass: {
        confirmButton: "btn btn-success ms-2",
        cancelButton: "btn btn-danger"
        },
        buttonsStyling: false
        });
        swalWithBootstrapButtons.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "No, cancel!",
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {

                fetch("/QuizwiseQuestion/MultipleQuestionRemoveFromQuiz", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(valuesArray)
                })
                .then(response =>{
                    if (!response.ok) {
                        Swal.fire({
                            title: "HTTP Error!",
                            text: `HTTP error! Status: ${response.status}`,
                            icon: "error",
                            showConfirmButton: false
                        });
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(result =>{
                    if (result.message === "Success") {
                        Swal.fire({
                        icon: "success",
                        title: "Your Question has Been Removed From Quiz Successfully.",
                        timer: 2000,
                        showConfirmButton: false
                        }).then(()=>{
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: "Fetch Error!",
                            text: `Error While Deleting Multiple Question From Quiz`,
                            icon: "error",
                            showConfirmButton: false
                        });
                        console.error("Error fetching data:", result);
                    }
                })
                .catch(error=> console.error("Fetch error:", error));

            } else if (
            /* Read more about handling dismissals below */
            result.dismiss === Swal.DismissReason.cancel
            ) {
            swalWithBootstrapButtons.fire({
                title: "Cancelled",
                text: "Your imaginary file is safe :)",
                icon: "error"
            });
            }
        });
    });
           

</script>
<script>
    
    document.addEventListener("DOMContentLoaded", function () {
            let table = new DataTable(".datatable", {
                paging: true,       // Enable pagination
                searching: true,    // Enable search bar
                ordering: true,     // Enable column sorting
                pageLength: 10,       // Set default rows per page
                columnDefs: [
                    {orderable: false, targets: 0},
                    { orderable: true, targets: [1, 7] }, // Enable sorting for "Question" and "Marks"
                    { orderable: false, targets: '_all' } // Disable sorting for all other columns
                ]
    });

                // Hide sorting icon on first column
            document.querySelectorAll(".datatable thead th:nth-child(1)").forEach(th => {
                th.classList.remove("sorting"); // Remove the default sorting class
            });
        });
</script>
